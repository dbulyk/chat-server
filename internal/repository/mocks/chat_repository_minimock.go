// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i chat_server/internal/repository.ChatRepository -o chat_repository_minimock.go -n ChatRepositoryMock -p mocks

import (
	"chat_server/internal/model"
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ChatRepositoryMock implements mm_repository.ChatRepository
type ChatRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddUserToChat          func(ctx context.Context, in *model.AddUserToChatRequest) (err error)
	funcAddUserToChatOrigin    string
	inspectFuncAddUserToChat   func(ctx context.Context, in *model.AddUserToChatRequest)
	afterAddUserToChatCounter  uint64
	beforeAddUserToChatCounter uint64
	AddUserToChatMock          mChatRepositoryMockAddUserToChat

	funcCreateChat          func(ctx context.Context, in *model.CreateChatRequest) (i1 int64, err error)
	funcCreateChatOrigin    string
	inspectFuncCreateChat   func(ctx context.Context, in *model.CreateChatRequest)
	afterCreateChatCounter  uint64
	beforeCreateChatCounter uint64
	CreateChatMock          mChatRepositoryMockCreateChat

	funcDeleteChat          func(ctx context.Context, chatID int64) (err error)
	funcDeleteChatOrigin    string
	inspectFuncDeleteChat   func(ctx context.Context, chatID int64)
	afterDeleteChatCounter  uint64
	beforeDeleteChatCounter uint64
	DeleteChatMock          mChatRepositoryMockDeleteChat

	funcSendMessageToChat          func(ctx context.Context, in *model.SendMessageToChatRequest) (err error)
	funcSendMessageToChatOrigin    string
	inspectFuncSendMessageToChat   func(ctx context.Context, in *model.SendMessageToChatRequest)
	afterSendMessageToChatCounter  uint64
	beforeSendMessageToChatCounter uint64
	SendMessageToChatMock          mChatRepositoryMockSendMessageToChat
}

// NewChatRepositoryMock returns a mock for mm_repository.ChatRepository
func NewChatRepositoryMock(t minimock.Tester) *ChatRepositoryMock {
	m := &ChatRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddUserToChatMock = mChatRepositoryMockAddUserToChat{mock: m}
	m.AddUserToChatMock.callArgs = []*ChatRepositoryMockAddUserToChatParams{}

	m.CreateChatMock = mChatRepositoryMockCreateChat{mock: m}
	m.CreateChatMock.callArgs = []*ChatRepositoryMockCreateChatParams{}

	m.DeleteChatMock = mChatRepositoryMockDeleteChat{mock: m}
	m.DeleteChatMock.callArgs = []*ChatRepositoryMockDeleteChatParams{}

	m.SendMessageToChatMock = mChatRepositoryMockSendMessageToChat{mock: m}
	m.SendMessageToChatMock.callArgs = []*ChatRepositoryMockSendMessageToChatParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatRepositoryMockAddUserToChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockAddUserToChatExpectation
	expectations       []*ChatRepositoryMockAddUserToChatExpectation

	callArgs []*ChatRepositoryMockAddUserToChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockAddUserToChatExpectation specifies expectation struct of the ChatRepository.AddUserToChat
type ChatRepositoryMockAddUserToChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockAddUserToChatParams
	paramPtrs          *ChatRepositoryMockAddUserToChatParamPtrs
	expectationOrigins ChatRepositoryMockAddUserToChatExpectationOrigins
	results            *ChatRepositoryMockAddUserToChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockAddUserToChatParams contains parameters of the ChatRepository.AddUserToChat
type ChatRepositoryMockAddUserToChatParams struct {
	ctx context.Context
	in  *model.AddUserToChatRequest
}

// ChatRepositoryMockAddUserToChatParamPtrs contains pointers to parameters of the ChatRepository.AddUserToChat
type ChatRepositoryMockAddUserToChatParamPtrs struct {
	ctx *context.Context
	in  **model.AddUserToChatRequest
}

// ChatRepositoryMockAddUserToChatResults contains results of the ChatRepository.AddUserToChat
type ChatRepositoryMockAddUserToChatResults struct {
	err error
}

// ChatRepositoryMockAddUserToChatOrigins contains origins of expectations of the ChatRepository.AddUserToChat
type ChatRepositoryMockAddUserToChatExpectationOrigins struct {
	origin    string
	originCtx string
	originIn  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddUserToChat *mChatRepositoryMockAddUserToChat) Optional() *mChatRepositoryMockAddUserToChat {
	mmAddUserToChat.optional = true
	return mmAddUserToChat
}

// Expect sets up expected params for ChatRepository.AddUserToChat
func (mmAddUserToChat *mChatRepositoryMockAddUserToChat) Expect(ctx context.Context, in *model.AddUserToChatRequest) *mChatRepositoryMockAddUserToChat {
	if mmAddUserToChat.mock.funcAddUserToChat != nil {
		mmAddUserToChat.mock.t.Fatalf("ChatRepositoryMock.AddUserToChat mock is already set by Set")
	}

	if mmAddUserToChat.defaultExpectation == nil {
		mmAddUserToChat.defaultExpectation = &ChatRepositoryMockAddUserToChatExpectation{}
	}

	if mmAddUserToChat.defaultExpectation.paramPtrs != nil {
		mmAddUserToChat.mock.t.Fatalf("ChatRepositoryMock.AddUserToChat mock is already set by ExpectParams functions")
	}

	mmAddUserToChat.defaultExpectation.params = &ChatRepositoryMockAddUserToChatParams{ctx, in}
	mmAddUserToChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddUserToChat.expectations {
		if minimock.Equal(e.params, mmAddUserToChat.defaultExpectation.params) {
			mmAddUserToChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddUserToChat.defaultExpectation.params)
		}
	}

	return mmAddUserToChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.AddUserToChat
func (mmAddUserToChat *mChatRepositoryMockAddUserToChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockAddUserToChat {
	if mmAddUserToChat.mock.funcAddUserToChat != nil {
		mmAddUserToChat.mock.t.Fatalf("ChatRepositoryMock.AddUserToChat mock is already set by Set")
	}

	if mmAddUserToChat.defaultExpectation == nil {
		mmAddUserToChat.defaultExpectation = &ChatRepositoryMockAddUserToChatExpectation{}
	}

	if mmAddUserToChat.defaultExpectation.params != nil {
		mmAddUserToChat.mock.t.Fatalf("ChatRepositoryMock.AddUserToChat mock is already set by Expect")
	}

	if mmAddUserToChat.defaultExpectation.paramPtrs == nil {
		mmAddUserToChat.defaultExpectation.paramPtrs = &ChatRepositoryMockAddUserToChatParamPtrs{}
	}
	mmAddUserToChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmAddUserToChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAddUserToChat
}

// ExpectInParam2 sets up expected param in for ChatRepository.AddUserToChat
func (mmAddUserToChat *mChatRepositoryMockAddUserToChat) ExpectInParam2(in *model.AddUserToChatRequest) *mChatRepositoryMockAddUserToChat {
	if mmAddUserToChat.mock.funcAddUserToChat != nil {
		mmAddUserToChat.mock.t.Fatalf("ChatRepositoryMock.AddUserToChat mock is already set by Set")
	}

	if mmAddUserToChat.defaultExpectation == nil {
		mmAddUserToChat.defaultExpectation = &ChatRepositoryMockAddUserToChatExpectation{}
	}

	if mmAddUserToChat.defaultExpectation.params != nil {
		mmAddUserToChat.mock.t.Fatalf("ChatRepositoryMock.AddUserToChat mock is already set by Expect")
	}

	if mmAddUserToChat.defaultExpectation.paramPtrs == nil {
		mmAddUserToChat.defaultExpectation.paramPtrs = &ChatRepositoryMockAddUserToChatParamPtrs{}
	}
	mmAddUserToChat.defaultExpectation.paramPtrs.in = &in
	mmAddUserToChat.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmAddUserToChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.AddUserToChat
func (mmAddUserToChat *mChatRepositoryMockAddUserToChat) Inspect(f func(ctx context.Context, in *model.AddUserToChatRequest)) *mChatRepositoryMockAddUserToChat {
	if mmAddUserToChat.mock.inspectFuncAddUserToChat != nil {
		mmAddUserToChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.AddUserToChat")
	}

	mmAddUserToChat.mock.inspectFuncAddUserToChat = f

	return mmAddUserToChat
}

// Return sets up results that will be returned by ChatRepository.AddUserToChat
func (mmAddUserToChat *mChatRepositoryMockAddUserToChat) Return(err error) *ChatRepositoryMock {
	if mmAddUserToChat.mock.funcAddUserToChat != nil {
		mmAddUserToChat.mock.t.Fatalf("ChatRepositoryMock.AddUserToChat mock is already set by Set")
	}

	if mmAddUserToChat.defaultExpectation == nil {
		mmAddUserToChat.defaultExpectation = &ChatRepositoryMockAddUserToChatExpectation{mock: mmAddUserToChat.mock}
	}
	mmAddUserToChat.defaultExpectation.results = &ChatRepositoryMockAddUserToChatResults{err}
	mmAddUserToChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddUserToChat.mock
}

// Set uses given function f to mock the ChatRepository.AddUserToChat method
func (mmAddUserToChat *mChatRepositoryMockAddUserToChat) Set(f func(ctx context.Context, in *model.AddUserToChatRequest) (err error)) *ChatRepositoryMock {
	if mmAddUserToChat.defaultExpectation != nil {
		mmAddUserToChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.AddUserToChat method")
	}

	if len(mmAddUserToChat.expectations) > 0 {
		mmAddUserToChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.AddUserToChat method")
	}

	mmAddUserToChat.mock.funcAddUserToChat = f
	mmAddUserToChat.mock.funcAddUserToChatOrigin = minimock.CallerInfo(1)
	return mmAddUserToChat.mock
}

// When sets expectation for the ChatRepository.AddUserToChat which will trigger the result defined by the following
// Then helper
func (mmAddUserToChat *mChatRepositoryMockAddUserToChat) When(ctx context.Context, in *model.AddUserToChatRequest) *ChatRepositoryMockAddUserToChatExpectation {
	if mmAddUserToChat.mock.funcAddUserToChat != nil {
		mmAddUserToChat.mock.t.Fatalf("ChatRepositoryMock.AddUserToChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockAddUserToChatExpectation{
		mock:               mmAddUserToChat.mock,
		params:             &ChatRepositoryMockAddUserToChatParams{ctx, in},
		expectationOrigins: ChatRepositoryMockAddUserToChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddUserToChat.expectations = append(mmAddUserToChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.AddUserToChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockAddUserToChatExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockAddUserToChatResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.AddUserToChat should be invoked
func (mmAddUserToChat *mChatRepositoryMockAddUserToChat) Times(n uint64) *mChatRepositoryMockAddUserToChat {
	if n == 0 {
		mmAddUserToChat.mock.t.Fatalf("Times of ChatRepositoryMock.AddUserToChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddUserToChat.expectedInvocations, n)
	mmAddUserToChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddUserToChat
}

func (mmAddUserToChat *mChatRepositoryMockAddUserToChat) invocationsDone() bool {
	if len(mmAddUserToChat.expectations) == 0 && mmAddUserToChat.defaultExpectation == nil && mmAddUserToChat.mock.funcAddUserToChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddUserToChat.mock.afterAddUserToChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddUserToChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddUserToChat implements mm_repository.ChatRepository
func (mmAddUserToChat *ChatRepositoryMock) AddUserToChat(ctx context.Context, in *model.AddUserToChatRequest) (err error) {
	mm_atomic.AddUint64(&mmAddUserToChat.beforeAddUserToChatCounter, 1)
	defer mm_atomic.AddUint64(&mmAddUserToChat.afterAddUserToChatCounter, 1)

	mmAddUserToChat.t.Helper()

	if mmAddUserToChat.inspectFuncAddUserToChat != nil {
		mmAddUserToChat.inspectFuncAddUserToChat(ctx, in)
	}

	mm_params := ChatRepositoryMockAddUserToChatParams{ctx, in}

	// Record call args
	mmAddUserToChat.AddUserToChatMock.mutex.Lock()
	mmAddUserToChat.AddUserToChatMock.callArgs = append(mmAddUserToChat.AddUserToChatMock.callArgs, &mm_params)
	mmAddUserToChat.AddUserToChatMock.mutex.Unlock()

	for _, e := range mmAddUserToChat.AddUserToChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddUserToChat.AddUserToChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddUserToChat.AddUserToChatMock.defaultExpectation.Counter, 1)
		mm_want := mmAddUserToChat.AddUserToChatMock.defaultExpectation.params
		mm_want_ptrs := mmAddUserToChat.AddUserToChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockAddUserToChatParams{ctx, in}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAddUserToChat.t.Errorf("ChatRepositoryMock.AddUserToChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddUserToChat.AddUserToChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmAddUserToChat.t.Errorf("ChatRepositoryMock.AddUserToChat got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddUserToChat.AddUserToChatMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddUserToChat.t.Errorf("ChatRepositoryMock.AddUserToChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddUserToChat.AddUserToChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddUserToChat.AddUserToChatMock.defaultExpectation.results
		if mm_results == nil {
			mmAddUserToChat.t.Fatal("No results are set for the ChatRepositoryMock.AddUserToChat")
		}
		return (*mm_results).err
	}
	if mmAddUserToChat.funcAddUserToChat != nil {
		return mmAddUserToChat.funcAddUserToChat(ctx, in)
	}
	mmAddUserToChat.t.Fatalf("Unexpected call to ChatRepositoryMock.AddUserToChat. %v %v", ctx, in)
	return
}

// AddUserToChatAfterCounter returns a count of finished ChatRepositoryMock.AddUserToChat invocations
func (mmAddUserToChat *ChatRepositoryMock) AddUserToChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddUserToChat.afterAddUserToChatCounter)
}

// AddUserToChatBeforeCounter returns a count of ChatRepositoryMock.AddUserToChat invocations
func (mmAddUserToChat *ChatRepositoryMock) AddUserToChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddUserToChat.beforeAddUserToChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.AddUserToChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddUserToChat *mChatRepositoryMockAddUserToChat) Calls() []*ChatRepositoryMockAddUserToChatParams {
	mmAddUserToChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockAddUserToChatParams, len(mmAddUserToChat.callArgs))
	copy(argCopy, mmAddUserToChat.callArgs)

	mmAddUserToChat.mutex.RUnlock()

	return argCopy
}

// MinimockAddUserToChatDone returns true if the count of the AddUserToChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockAddUserToChatDone() bool {
	if m.AddUserToChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddUserToChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddUserToChatMock.invocationsDone()
}

// MinimockAddUserToChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockAddUserToChatInspect() {
	for _, e := range m.AddUserToChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.AddUserToChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddUserToChatCounter := mm_atomic.LoadUint64(&m.afterAddUserToChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddUserToChatMock.defaultExpectation != nil && afterAddUserToChatCounter < 1 {
		if m.AddUserToChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.AddUserToChat at\n%s", m.AddUserToChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.AddUserToChat at\n%s with params: %#v", m.AddUserToChatMock.defaultExpectation.expectationOrigins.origin, *m.AddUserToChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddUserToChat != nil && afterAddUserToChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.AddUserToChat at\n%s", m.funcAddUserToChatOrigin)
	}

	if !m.AddUserToChatMock.invocationsDone() && afterAddUserToChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.AddUserToChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddUserToChatMock.expectedInvocations), m.AddUserToChatMock.expectedInvocationsOrigin, afterAddUserToChatCounter)
	}
}

type mChatRepositoryMockCreateChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateChatExpectation
	expectations       []*ChatRepositoryMockCreateChatExpectation

	callArgs []*ChatRepositoryMockCreateChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockCreateChatExpectation specifies expectation struct of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockCreateChatParams
	paramPtrs          *ChatRepositoryMockCreateChatParamPtrs
	expectationOrigins ChatRepositoryMockCreateChatExpectationOrigins
	results            *ChatRepositoryMockCreateChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockCreateChatParams contains parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParams struct {
	ctx context.Context
	in  *model.CreateChatRequest
}

// ChatRepositoryMockCreateChatParamPtrs contains pointers to parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParamPtrs struct {
	ctx *context.Context
	in  **model.CreateChatRequest
}

// ChatRepositoryMockCreateChatResults contains results of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatResults struct {
	i1  int64
	err error
}

// ChatRepositoryMockCreateChatOrigins contains origins of expectations of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectationOrigins struct {
	origin    string
	originCtx string
	originIn  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateChat *mChatRepositoryMockCreateChat) Optional() *mChatRepositoryMockCreateChat {
	mmCreateChat.optional = true
	return mmCreateChat
}

// Expect sets up expected params for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Expect(ctx context.Context, in *model.CreateChatRequest) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.paramPtrs != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by ExpectParams functions")
	}

	mmCreateChat.defaultExpectation.params = &ChatRepositoryMockCreateChatParams{ctx, in}
	mmCreateChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateChat.expectations {
		if minimock.Equal(e.params, mmCreateChat.defaultExpectation.params) {
			mmCreateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateChat.defaultExpectation.params)
		}
	}

	return mmCreateChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateChat
}

// ExpectInParam2 sets up expected param in for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectInParam2(in *model.CreateChatRequest) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.in = &in
	mmCreateChat.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmCreateChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Inspect(f func(ctx context.Context, in *model.CreateChatRequest)) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.inspectFuncCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CreateChat")
	}

	mmCreateChat.mock.inspectFuncCreateChat = f

	return mmCreateChat
}

// Return sets up results that will be returned by ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Return(i1 int64, err error) *ChatRepositoryMock {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{mock: mmCreateChat.mock}
	}
	mmCreateChat.defaultExpectation.results = &ChatRepositoryMockCreateChatResults{i1, err}
	mmCreateChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// Set uses given function f to mock the ChatRepository.CreateChat method
func (mmCreateChat *mChatRepositoryMockCreateChat) Set(f func(ctx context.Context, in *model.CreateChatRequest) (i1 int64, err error)) *ChatRepositoryMock {
	if mmCreateChat.defaultExpectation != nil {
		mmCreateChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CreateChat method")
	}

	if len(mmCreateChat.expectations) > 0 {
		mmCreateChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CreateChat method")
	}

	mmCreateChat.mock.funcCreateChat = f
	mmCreateChat.mock.funcCreateChatOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// When sets expectation for the ChatRepository.CreateChat which will trigger the result defined by the following
// Then helper
func (mmCreateChat *mChatRepositoryMockCreateChat) When(ctx context.Context, in *model.CreateChatRequest) *ChatRepositoryMockCreateChatExpectation {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateChatExpectation{
		mock:               mmCreateChat.mock,
		params:             &ChatRepositoryMockCreateChatParams{ctx, in},
		expectationOrigins: ChatRepositoryMockCreateChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateChat.expectations = append(mmCreateChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CreateChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateChatExpectation) Then(i1 int64, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateChatResults{i1, err}
	return e.mock
}

// Times sets number of times ChatRepository.CreateChat should be invoked
func (mmCreateChat *mChatRepositoryMockCreateChat) Times(n uint64) *mChatRepositoryMockCreateChat {
	if n == 0 {
		mmCreateChat.mock.t.Fatalf("Times of ChatRepositoryMock.CreateChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateChat.expectedInvocations, n)
	mmCreateChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateChat
}

func (mmCreateChat *mChatRepositoryMockCreateChat) invocationsDone() bool {
	if len(mmCreateChat.expectations) == 0 && mmCreateChat.defaultExpectation == nil && mmCreateChat.mock.funcCreateChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateChat.mock.afterCreateChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateChat implements mm_repository.ChatRepository
func (mmCreateChat *ChatRepositoryMock) CreateChat(ctx context.Context, in *model.CreateChatRequest) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateChat.beforeCreateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateChat.afterCreateChatCounter, 1)

	mmCreateChat.t.Helper()

	if mmCreateChat.inspectFuncCreateChat != nil {
		mmCreateChat.inspectFuncCreateChat(ctx, in)
	}

	mm_params := ChatRepositoryMockCreateChatParams{ctx, in}

	// Record call args
	mmCreateChat.CreateChatMock.mutex.Lock()
	mmCreateChat.CreateChatMock.callArgs = append(mmCreateChat.CreateChatMock.callArgs, &mm_params)
	mmCreateChat.CreateChatMock.mutex.Unlock()

	for _, e := range mmCreateChat.CreateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateChat.CreateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateChat.CreateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateChat.CreateChatMock.defaultExpectation.params
		mm_want_ptrs := mmCreateChat.CreateChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCreateChatParams{ctx, in}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateChat.CreateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateChat.t.Fatal("No results are set for the ChatRepositoryMock.CreateChat")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateChat.funcCreateChat != nil {
		return mmCreateChat.funcCreateChat(ctx, in)
	}
	mmCreateChat.t.Fatalf("Unexpected call to ChatRepositoryMock.CreateChat. %v %v", ctx, in)
	return
}

// CreateChatAfterCounter returns a count of finished ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.afterCreateChatCounter)
}

// CreateChatBeforeCounter returns a count of ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.beforeCreateChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CreateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateChat *mChatRepositoryMockCreateChat) Calls() []*ChatRepositoryMockCreateChatParams {
	mmCreateChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateChatParams, len(mmCreateChat.callArgs))
	copy(argCopy, mmCreateChat.callArgs)

	mmCreateChat.mutex.RUnlock()

	return argCopy
}

// MinimockCreateChatDone returns true if the count of the CreateChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateChatDone() bool {
	if m.CreateChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateChatMock.invocationsDone()
}

// MinimockCreateChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateChatInspect() {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateChatCounter := mm_atomic.LoadUint64(&m.afterCreateChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && afterCreateChatCounter < 1 {
		if m.CreateChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s", m.CreateChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s with params: %#v", m.CreateChatMock.defaultExpectation.expectationOrigins.origin, *m.CreateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && afterCreateChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s", m.funcCreateChatOrigin)
	}

	if !m.CreateChatMock.invocationsDone() && afterCreateChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.CreateChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateChatMock.expectedInvocations), m.CreateChatMock.expectedInvocationsOrigin, afterCreateChatCounter)
	}
}

type mChatRepositoryMockDeleteChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockDeleteChatExpectation
	expectations       []*ChatRepositoryMockDeleteChatExpectation

	callArgs []*ChatRepositoryMockDeleteChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockDeleteChatExpectation specifies expectation struct of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockDeleteChatParams
	paramPtrs          *ChatRepositoryMockDeleteChatParamPtrs
	expectationOrigins ChatRepositoryMockDeleteChatExpectationOrigins
	results            *ChatRepositoryMockDeleteChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockDeleteChatParams contains parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParams struct {
	ctx    context.Context
	chatID int64
}

// ChatRepositoryMockDeleteChatParamPtrs contains pointers to parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParamPtrs struct {
	ctx    *context.Context
	chatID *int64
}

// ChatRepositoryMockDeleteChatResults contains results of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatResults struct {
	err error
}

// ChatRepositoryMockDeleteChatOrigins contains origins of expectations of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectationOrigins struct {
	origin       string
	originCtx    string
	originChatID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Optional() *mChatRepositoryMockDeleteChat {
	mmDeleteChat.optional = true
	return mmDeleteChat
}

// Expect sets up expected params for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Expect(ctx context.Context, chatID int64) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.paramPtrs != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by ExpectParams functions")
	}

	mmDeleteChat.defaultExpectation.params = &ChatRepositoryMockDeleteChatParams{ctx, chatID}
	mmDeleteChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteChat.expectations {
		if minimock.Equal(e.params, mmDeleteChat.defaultExpectation.params) {
			mmDeleteChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteChat.defaultExpectation.params)
		}
	}

	return mmDeleteChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteChat
}

// ExpectChatIDParam2 sets up expected param chatID for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) ExpectChatIDParam2(chatID int64) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.chatID = &chatID
	mmDeleteChat.defaultExpectation.expectationOrigins.originChatID = minimock.CallerInfo(1)

	return mmDeleteChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Inspect(f func(ctx context.Context, chatID int64)) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.inspectFuncDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.DeleteChat")
	}

	mmDeleteChat.mock.inspectFuncDeleteChat = f

	return mmDeleteChat
}

// Return sets up results that will be returned by ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Return(err error) *ChatRepositoryMock {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{mock: mmDeleteChat.mock}
	}
	mmDeleteChat.defaultExpectation.results = &ChatRepositoryMockDeleteChatResults{err}
	mmDeleteChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// Set uses given function f to mock the ChatRepository.DeleteChat method
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Set(f func(ctx context.Context, chatID int64) (err error)) *ChatRepositoryMock {
	if mmDeleteChat.defaultExpectation != nil {
		mmDeleteChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.DeleteChat method")
	}

	if len(mmDeleteChat.expectations) > 0 {
		mmDeleteChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.DeleteChat method")
	}

	mmDeleteChat.mock.funcDeleteChat = f
	mmDeleteChat.mock.funcDeleteChatOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// When sets expectation for the ChatRepository.DeleteChat which will trigger the result defined by the following
// Then helper
func (mmDeleteChat *mChatRepositoryMockDeleteChat) When(ctx context.Context, chatID int64) *ChatRepositoryMockDeleteChatExpectation {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockDeleteChatExpectation{
		mock:               mmDeleteChat.mock,
		params:             &ChatRepositoryMockDeleteChatParams{ctx, chatID},
		expectationOrigins: ChatRepositoryMockDeleteChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteChat.expectations = append(mmDeleteChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.DeleteChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockDeleteChatExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockDeleteChatResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.DeleteChat should be invoked
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Times(n uint64) *mChatRepositoryMockDeleteChat {
	if n == 0 {
		mmDeleteChat.mock.t.Fatalf("Times of ChatRepositoryMock.DeleteChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteChat.expectedInvocations, n)
	mmDeleteChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteChat
}

func (mmDeleteChat *mChatRepositoryMockDeleteChat) invocationsDone() bool {
	if len(mmDeleteChat.expectations) == 0 && mmDeleteChat.defaultExpectation == nil && mmDeleteChat.mock.funcDeleteChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteChat.mock.afterDeleteChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteChat implements mm_repository.ChatRepository
func (mmDeleteChat *ChatRepositoryMock) DeleteChat(ctx context.Context, chatID int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteChat.beforeDeleteChatCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteChat.afterDeleteChatCounter, 1)

	mmDeleteChat.t.Helper()

	if mmDeleteChat.inspectFuncDeleteChat != nil {
		mmDeleteChat.inspectFuncDeleteChat(ctx, chatID)
	}

	mm_params := ChatRepositoryMockDeleteChatParams{ctx, chatID}

	// Record call args
	mmDeleteChat.DeleteChatMock.mutex.Lock()
	mmDeleteChat.DeleteChatMock.callArgs = append(mmDeleteChat.DeleteChatMock.callArgs, &mm_params)
	mmDeleteChat.DeleteChatMock.mutex.Unlock()

	for _, e := range mmDeleteChat.DeleteChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteChat.DeleteChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteChat.DeleteChatMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteChat.DeleteChatMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteChat.DeleteChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockDeleteChatParams{ctx, chatID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameter chatID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originChatID, *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteChat.DeleteChatMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteChat.t.Fatal("No results are set for the ChatRepositoryMock.DeleteChat")
		}
		return (*mm_results).err
	}
	if mmDeleteChat.funcDeleteChat != nil {
		return mmDeleteChat.funcDeleteChat(ctx, chatID)
	}
	mmDeleteChat.t.Fatalf("Unexpected call to ChatRepositoryMock.DeleteChat. %v %v", ctx, chatID)
	return
}

// DeleteChatAfterCounter returns a count of finished ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.afterDeleteChatCounter)
}

// DeleteChatBeforeCounter returns a count of ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.beforeDeleteChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.DeleteChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Calls() []*ChatRepositoryMockDeleteChatParams {
	mmDeleteChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockDeleteChatParams, len(mmDeleteChat.callArgs))
	copy(argCopy, mmDeleteChat.callArgs)

	mmDeleteChat.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteChatDone returns true if the count of the DeleteChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockDeleteChatDone() bool {
	if m.DeleteChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteChatMock.invocationsDone()
}

// MinimockDeleteChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockDeleteChatInspect() {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteChatCounter := mm_atomic.LoadUint64(&m.afterDeleteChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && afterDeleteChatCounter < 1 {
		if m.DeleteChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s", m.DeleteChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s with params: %#v", m.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *m.DeleteChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && afterDeleteChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s", m.funcDeleteChatOrigin)
	}

	if !m.DeleteChatMock.invocationsDone() && afterDeleteChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.DeleteChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteChatMock.expectedInvocations), m.DeleteChatMock.expectedInvocationsOrigin, afterDeleteChatCounter)
	}
}

type mChatRepositoryMockSendMessageToChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockSendMessageToChatExpectation
	expectations       []*ChatRepositoryMockSendMessageToChatExpectation

	callArgs []*ChatRepositoryMockSendMessageToChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockSendMessageToChatExpectation specifies expectation struct of the ChatRepository.SendMessageToChat
type ChatRepositoryMockSendMessageToChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockSendMessageToChatParams
	paramPtrs          *ChatRepositoryMockSendMessageToChatParamPtrs
	expectationOrigins ChatRepositoryMockSendMessageToChatExpectationOrigins
	results            *ChatRepositoryMockSendMessageToChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockSendMessageToChatParams contains parameters of the ChatRepository.SendMessageToChat
type ChatRepositoryMockSendMessageToChatParams struct {
	ctx context.Context
	in  *model.SendMessageToChatRequest
}

// ChatRepositoryMockSendMessageToChatParamPtrs contains pointers to parameters of the ChatRepository.SendMessageToChat
type ChatRepositoryMockSendMessageToChatParamPtrs struct {
	ctx *context.Context
	in  **model.SendMessageToChatRequest
}

// ChatRepositoryMockSendMessageToChatResults contains results of the ChatRepository.SendMessageToChat
type ChatRepositoryMockSendMessageToChatResults struct {
	err error
}

// ChatRepositoryMockSendMessageToChatOrigins contains origins of expectations of the ChatRepository.SendMessageToChat
type ChatRepositoryMockSendMessageToChatExpectationOrigins struct {
	origin    string
	originCtx string
	originIn  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendMessageToChat *mChatRepositoryMockSendMessageToChat) Optional() *mChatRepositoryMockSendMessageToChat {
	mmSendMessageToChat.optional = true
	return mmSendMessageToChat
}

// Expect sets up expected params for ChatRepository.SendMessageToChat
func (mmSendMessageToChat *mChatRepositoryMockSendMessageToChat) Expect(ctx context.Context, in *model.SendMessageToChatRequest) *mChatRepositoryMockSendMessageToChat {
	if mmSendMessageToChat.mock.funcSendMessageToChat != nil {
		mmSendMessageToChat.mock.t.Fatalf("ChatRepositoryMock.SendMessageToChat mock is already set by Set")
	}

	if mmSendMessageToChat.defaultExpectation == nil {
		mmSendMessageToChat.defaultExpectation = &ChatRepositoryMockSendMessageToChatExpectation{}
	}

	if mmSendMessageToChat.defaultExpectation.paramPtrs != nil {
		mmSendMessageToChat.mock.t.Fatalf("ChatRepositoryMock.SendMessageToChat mock is already set by ExpectParams functions")
	}

	mmSendMessageToChat.defaultExpectation.params = &ChatRepositoryMockSendMessageToChatParams{ctx, in}
	mmSendMessageToChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSendMessageToChat.expectations {
		if minimock.Equal(e.params, mmSendMessageToChat.defaultExpectation.params) {
			mmSendMessageToChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessageToChat.defaultExpectation.params)
		}
	}

	return mmSendMessageToChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.SendMessageToChat
func (mmSendMessageToChat *mChatRepositoryMockSendMessageToChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockSendMessageToChat {
	if mmSendMessageToChat.mock.funcSendMessageToChat != nil {
		mmSendMessageToChat.mock.t.Fatalf("ChatRepositoryMock.SendMessageToChat mock is already set by Set")
	}

	if mmSendMessageToChat.defaultExpectation == nil {
		mmSendMessageToChat.defaultExpectation = &ChatRepositoryMockSendMessageToChatExpectation{}
	}

	if mmSendMessageToChat.defaultExpectation.params != nil {
		mmSendMessageToChat.mock.t.Fatalf("ChatRepositoryMock.SendMessageToChat mock is already set by Expect")
	}

	if mmSendMessageToChat.defaultExpectation.paramPtrs == nil {
		mmSendMessageToChat.defaultExpectation.paramPtrs = &ChatRepositoryMockSendMessageToChatParamPtrs{}
	}
	mmSendMessageToChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmSendMessageToChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSendMessageToChat
}

// ExpectInParam2 sets up expected param in for ChatRepository.SendMessageToChat
func (mmSendMessageToChat *mChatRepositoryMockSendMessageToChat) ExpectInParam2(in *model.SendMessageToChatRequest) *mChatRepositoryMockSendMessageToChat {
	if mmSendMessageToChat.mock.funcSendMessageToChat != nil {
		mmSendMessageToChat.mock.t.Fatalf("ChatRepositoryMock.SendMessageToChat mock is already set by Set")
	}

	if mmSendMessageToChat.defaultExpectation == nil {
		mmSendMessageToChat.defaultExpectation = &ChatRepositoryMockSendMessageToChatExpectation{}
	}

	if mmSendMessageToChat.defaultExpectation.params != nil {
		mmSendMessageToChat.mock.t.Fatalf("ChatRepositoryMock.SendMessageToChat mock is already set by Expect")
	}

	if mmSendMessageToChat.defaultExpectation.paramPtrs == nil {
		mmSendMessageToChat.defaultExpectation.paramPtrs = &ChatRepositoryMockSendMessageToChatParamPtrs{}
	}
	mmSendMessageToChat.defaultExpectation.paramPtrs.in = &in
	mmSendMessageToChat.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmSendMessageToChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.SendMessageToChat
func (mmSendMessageToChat *mChatRepositoryMockSendMessageToChat) Inspect(f func(ctx context.Context, in *model.SendMessageToChatRequest)) *mChatRepositoryMockSendMessageToChat {
	if mmSendMessageToChat.mock.inspectFuncSendMessageToChat != nil {
		mmSendMessageToChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.SendMessageToChat")
	}

	mmSendMessageToChat.mock.inspectFuncSendMessageToChat = f

	return mmSendMessageToChat
}

// Return sets up results that will be returned by ChatRepository.SendMessageToChat
func (mmSendMessageToChat *mChatRepositoryMockSendMessageToChat) Return(err error) *ChatRepositoryMock {
	if mmSendMessageToChat.mock.funcSendMessageToChat != nil {
		mmSendMessageToChat.mock.t.Fatalf("ChatRepositoryMock.SendMessageToChat mock is already set by Set")
	}

	if mmSendMessageToChat.defaultExpectation == nil {
		mmSendMessageToChat.defaultExpectation = &ChatRepositoryMockSendMessageToChatExpectation{mock: mmSendMessageToChat.mock}
	}
	mmSendMessageToChat.defaultExpectation.results = &ChatRepositoryMockSendMessageToChatResults{err}
	mmSendMessageToChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSendMessageToChat.mock
}

// Set uses given function f to mock the ChatRepository.SendMessageToChat method
func (mmSendMessageToChat *mChatRepositoryMockSendMessageToChat) Set(f func(ctx context.Context, in *model.SendMessageToChatRequest) (err error)) *ChatRepositoryMock {
	if mmSendMessageToChat.defaultExpectation != nil {
		mmSendMessageToChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.SendMessageToChat method")
	}

	if len(mmSendMessageToChat.expectations) > 0 {
		mmSendMessageToChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.SendMessageToChat method")
	}

	mmSendMessageToChat.mock.funcSendMessageToChat = f
	mmSendMessageToChat.mock.funcSendMessageToChatOrigin = minimock.CallerInfo(1)
	return mmSendMessageToChat.mock
}

// When sets expectation for the ChatRepository.SendMessageToChat which will trigger the result defined by the following
// Then helper
func (mmSendMessageToChat *mChatRepositoryMockSendMessageToChat) When(ctx context.Context, in *model.SendMessageToChatRequest) *ChatRepositoryMockSendMessageToChatExpectation {
	if mmSendMessageToChat.mock.funcSendMessageToChat != nil {
		mmSendMessageToChat.mock.t.Fatalf("ChatRepositoryMock.SendMessageToChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockSendMessageToChatExpectation{
		mock:               mmSendMessageToChat.mock,
		params:             &ChatRepositoryMockSendMessageToChatParams{ctx, in},
		expectationOrigins: ChatRepositoryMockSendMessageToChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSendMessageToChat.expectations = append(mmSendMessageToChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.SendMessageToChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockSendMessageToChatExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockSendMessageToChatResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.SendMessageToChat should be invoked
func (mmSendMessageToChat *mChatRepositoryMockSendMessageToChat) Times(n uint64) *mChatRepositoryMockSendMessageToChat {
	if n == 0 {
		mmSendMessageToChat.mock.t.Fatalf("Times of ChatRepositoryMock.SendMessageToChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendMessageToChat.expectedInvocations, n)
	mmSendMessageToChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSendMessageToChat
}

func (mmSendMessageToChat *mChatRepositoryMockSendMessageToChat) invocationsDone() bool {
	if len(mmSendMessageToChat.expectations) == 0 && mmSendMessageToChat.defaultExpectation == nil && mmSendMessageToChat.mock.funcSendMessageToChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendMessageToChat.mock.afterSendMessageToChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendMessageToChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendMessageToChat implements mm_repository.ChatRepository
func (mmSendMessageToChat *ChatRepositoryMock) SendMessageToChat(ctx context.Context, in *model.SendMessageToChatRequest) (err error) {
	mm_atomic.AddUint64(&mmSendMessageToChat.beforeSendMessageToChatCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessageToChat.afterSendMessageToChatCounter, 1)

	mmSendMessageToChat.t.Helper()

	if mmSendMessageToChat.inspectFuncSendMessageToChat != nil {
		mmSendMessageToChat.inspectFuncSendMessageToChat(ctx, in)
	}

	mm_params := ChatRepositoryMockSendMessageToChatParams{ctx, in}

	// Record call args
	mmSendMessageToChat.SendMessageToChatMock.mutex.Lock()
	mmSendMessageToChat.SendMessageToChatMock.callArgs = append(mmSendMessageToChat.SendMessageToChatMock.callArgs, &mm_params)
	mmSendMessageToChat.SendMessageToChatMock.mutex.Unlock()

	for _, e := range mmSendMessageToChat.SendMessageToChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendMessageToChat.SendMessageToChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessageToChat.SendMessageToChatMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessageToChat.SendMessageToChatMock.defaultExpectation.params
		mm_want_ptrs := mmSendMessageToChat.SendMessageToChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockSendMessageToChatParams{ctx, in}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSendMessageToChat.t.Errorf("ChatRepositoryMock.SendMessageToChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendMessageToChat.SendMessageToChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmSendMessageToChat.t.Errorf("ChatRepositoryMock.SendMessageToChat got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendMessageToChat.SendMessageToChatMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessageToChat.t.Errorf("ChatRepositoryMock.SendMessageToChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSendMessageToChat.SendMessageToChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendMessageToChat.SendMessageToChatMock.defaultExpectation.results
		if mm_results == nil {
			mmSendMessageToChat.t.Fatal("No results are set for the ChatRepositoryMock.SendMessageToChat")
		}
		return (*mm_results).err
	}
	if mmSendMessageToChat.funcSendMessageToChat != nil {
		return mmSendMessageToChat.funcSendMessageToChat(ctx, in)
	}
	mmSendMessageToChat.t.Fatalf("Unexpected call to ChatRepositoryMock.SendMessageToChat. %v %v", ctx, in)
	return
}

// SendMessageToChatAfterCounter returns a count of finished ChatRepositoryMock.SendMessageToChat invocations
func (mmSendMessageToChat *ChatRepositoryMock) SendMessageToChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessageToChat.afterSendMessageToChatCounter)
}

// SendMessageToChatBeforeCounter returns a count of ChatRepositoryMock.SendMessageToChat invocations
func (mmSendMessageToChat *ChatRepositoryMock) SendMessageToChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessageToChat.beforeSendMessageToChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.SendMessageToChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessageToChat *mChatRepositoryMockSendMessageToChat) Calls() []*ChatRepositoryMockSendMessageToChatParams {
	mmSendMessageToChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockSendMessageToChatParams, len(mmSendMessageToChat.callArgs))
	copy(argCopy, mmSendMessageToChat.callArgs)

	mmSendMessageToChat.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageToChatDone returns true if the count of the SendMessageToChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockSendMessageToChatDone() bool {
	if m.SendMessageToChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendMessageToChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendMessageToChatMock.invocationsDone()
}

// MinimockSendMessageToChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockSendMessageToChatInspect() {
	for _, e := range m.SendMessageToChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessageToChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendMessageToChatCounter := mm_atomic.LoadUint64(&m.afterSendMessageToChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageToChatMock.defaultExpectation != nil && afterSendMessageToChatCounter < 1 {
		if m.SendMessageToChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessageToChat at\n%s", m.SendMessageToChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessageToChat at\n%s with params: %#v", m.SendMessageToChatMock.defaultExpectation.expectationOrigins.origin, *m.SendMessageToChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessageToChat != nil && afterSendMessageToChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.SendMessageToChat at\n%s", m.funcSendMessageToChatOrigin)
	}

	if !m.SendMessageToChatMock.invocationsDone() && afterSendMessageToChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.SendMessageToChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendMessageToChatMock.expectedInvocations), m.SendMessageToChatMock.expectedInvocationsOrigin, afterSendMessageToChatCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddUserToChatInspect()

			m.MinimockCreateChatInspect()

			m.MinimockDeleteChatInspect()

			m.MinimockSendMessageToChatInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddUserToChatDone() &&
		m.MinimockCreateChatDone() &&
		m.MinimockDeleteChatDone() &&
		m.MinimockSendMessageToChatDone()
}
